---

- hosts: all
  vars:
    workdir: "{{ lookup('env', 'TMPDIR')|regex_replace('/+$','') }}/dgaml-demo"
    corpus_index_prefix: "domain_corpus"
    ngram_index_prefix: "domain_ngram"
    array_ngrams: false
    ansible_connection: local
    ansible_python_interpreter: "{{ ansible_playbook_python }}"

  tasks:

  - name: Fail check
    fail:
      msg: Requires el_cloud_id and el_cloud_pw
    when: not el_cloud_id or not el_cloud_pw
    tags:
    - always

  - name: Set variables
    set_fact:
      elasticsearch_url: "https://{{ el_cloud_info[1] }}.{{ el_cloud_info[0] }}"
      kibana_url: "https://{{ el_cloud_info[2] }}.{{ el_cloud_info[0] }}"
      corpus_index: "{{ corpus_index|default(corpus_index_prefix~'-'~ansible_date_time.date) }}"
      ngram_index: "{{ ngram_index|default(ngram_index_prefix~'-'~ansible_date_time.date) }}"
    vars:
      el_cloud_info: "{{ (el_cloud_id|regex_replace('^[^:]*:','')|b64decode).split('$')|list }}"
    failed_when: el_cloud_info|length < 3
    tags:
    - always

  - name: "Check working dir: {{ workdir }}"
    file: path="{{ workdir }}" state=directory mode=0775
    tags:
    - always

    # One (array of strings) field per ngram (length)
  - name: "Create/Update ngram extractor script (array): ngram-extractor"
    uri:
      url: "{{ elasticsearch_url }}/_scripts/ngram-extractor"
      method: POST
      body_format: json
      body:
        script:
          lang: painless
          source: |
            //String domain = ctx[params.field].splitOnToken('.')[0];
            String domain = ctx[params.field].replace('.', '');
            
            String ngram_field = params.field+'_'+Integer.toString(params.ngram_len)+'gram';
            ctx[ngram_field] = new ArrayList();
            
            for (int i=0; i<=domain.length()-params.ngram_len; i++){
              ctx[ngram_field].add( domain.substring(i, i+params.ngram_len) );
            }
      headers:
        Accept: "application/json"
      url_username: elastic
      url_password: "{{ el_cloud_pw }}"
      force_basic_auth: true
      timeout: 60
      return_content: false
    register: result
    when: array_ngrams
    tags:
    - script

    # Separate (string) fields for each individual ngram
  - name: "Create/Update ngram extractor script (object): ngram-extractor"
    uri:
      url: "{{ elasticsearch_url }}/_scripts/ngram-extractor"
      method: POST
      body_format: json
      body:
        script:
          lang: painless
          source: |
            //String domain = ctx[params.field].splitOnToken('.')[0];
            String domain = ctx[params.field].replace('.', '');
            
            String ngram_field = params.field+'_'+Integer.toString(params.ngram_len)+'gram';
            ctx[ngram_field] = new HashMap();
            
            for (int i=0;i<=domain.length()-params.ngram_len;i++){
              if (i>25) break; // limit to 26 ngrams, max. (a to z)
            
              ctx[ngram_field][Character.toString((char)(i+97))] =
                domain.substring(i, i+params.ngram_len);
            }
      headers:
        Accept: "application/json"
      url_username: elastic
      url_password: "{{ el_cloud_pw }}"
      force_basic_auth: true
      timeout: 60
      return_content: false
    register: result
    when: not array_ngrams
    tags:
    - script

  - name: Dump result
    debug: var=result verbosity=1
    tags:
    - script

  - name: "Create/Update ngram expander pipeline: dga_ngram_expander"
    uri:
      url: "{{ elasticsearch_url }}/_ingest/pipeline/dga_ngram_expander"
      method: PUT
      body_format: json
      body:
        description: Expands a domain into ngrams
        processors:
        - script:
            id: ngram-extractor
            params:
              ngram_len: 1
              field: domain
        - script:
            id: ngram-extractor
            params:
              ngram_len: 2
              field: domain
        - script:
            id: ngram-extractor
            params:
              ngram_len: 3
              field: domain
      headers:
        Accept: "application/json"
      url_username: elastic
      url_password: "{{ el_cloud_pw }}"
      force_basic_auth: true
      timeout: 60
      return_content: false
    register: result
    tags:
    - pipeline

  - name: Dump result
    debug: var=result verbosity=1
    tags:
    - pipeline

  # If run more than once on the same day
  - name: Remove old ngram index
    uri:
      url: "{{ elasticsearch_url }}/{{ ngram_index }}"
      method: DELETE
      headers:
        Accept: "application/json"
      url_username: elastic
      url_password: "{{ el_cloud_pw }}"
      force_basic_auth: true
      timeout: 60
      status_code: [200,201,404]
      return_content: false
    register: result
    changed_when: result.status != 404
    tags:
    - rem_old

  - name: Dump result
    debug: var=result verbosity=1
    tags:
    - rem_old

  - name: "Re-index {{ corpus_index }} to {{ ngram_index }} with pipeline dga_ngram_expander"
    uri:
      url: "{{ elasticsearch_url }}/_reindex?slices=2&wait_for_completion=false"
      method: POST
      body_format: json
      body:
        source:
          index: "{{ corpus_index }}"
        dest:
          index: "{{ ngram_index }}"
          pipeline: dga_ngram_expander
      headers:
        Accept: "application/json"
      url_username: elastic
      url_password: "{{ el_cloud_pw }}"
      force_basic_auth: true
      timeout: 60
      return_content: false
    register: ri_result
    tags:
    - reindex

  - name: Dump result
    debug: var=ri_result verbosity=1
    tags:
    - reindex
    
    # Why not wait_for_completion=true? because the Cloud proxies will timeout!
  - name: "Wait for re-index of {{ ngram_index }} to complete"
    uri:
      url: "{{ elasticsearch_url }}/_tasks/{{ ri_result.json.task }}"
      method: GET
      headers:
        Accept: "application/json"
      url_username: elastic
      url_password: "{{ el_cloud_pw }}"
      force_basic_auth: true
      timeout: 10
      return_content: false
    register: result
    until: result.json.completed
    delay: 20
    retries: 100
    tags:
    - reindex_wait
    
  - name: "Add Kibana index pattern for {{ ngram_index }}"
    uri:
      url: "{{ kibana_url }}/api/saved_objects/index-pattern/{{ ngram_index }}"
      method: POST
      body_format: json
      body:
        attributes:
          title: "{{ ngram_index }}"
      headers:
        kbn-xsrf: true
        Accept: "application/json"
      url_username: elastic
      url_password: "{{ el_cloud_pw }}"
      force_basic_auth: true
      timeout: 60
      status_code: [200,201,409]
      return_content: false
    changed_when: result.status != 409
    register: result
    tags:
    - index_pattern

  - name: Dump result
    debug: var=result verbosity=1
    tags:
    - index_pattern
